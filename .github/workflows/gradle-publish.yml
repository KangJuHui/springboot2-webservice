# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

env:  #11. 환경 변수 
  S3_BUCKET_NAME: freelec-springboot-build-file
  PROJECT_NAME: springboot2-webservice
  CODE_DEPLOY_APP_NAME: freelec-springboot2-webservice     #15. codedeploy의 어플리케이션과 그룹 이름
  CODE_DEPLOY_GROUP_NAME: freelec-springboot-webservice-group

name: deploy #0. GitHub Action에서 보여질 이름을 지정한다.

on:
  release:
    types: [push] #1. push 시 자동으로 실행된다.
  push:
    branches: [master] #2. master 브랜치에서 동작한다.
  workflow_dispatch:   #3. 수동으로도 실행이 가능하다.

jobs:
  build:
    runs-on: ubuntu-latest #4. 해당 스크립트를 작동할 OS
    permissions:
      contents: read
      packages: write

    steps:
    #5. 프로젝트 코드를 CheckOut한다.
    - name: Checkout
      uses: actions/checkout@v3 
      
    #6. Java 11 버전을 설치한다.
    - name: Set up JDK 11
      uses: actions/setup-java@v3 
      with:
        java-version: '11'
        distribution: 'temurin'
      
    #7. gradle wrapper를 실행할 수 있도록 실행 권한을 부여한다.
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew 
      shell: bash

    #8. gradle wrapper를 통해 해당 프로젝트를 build한다.
    - name: Build with Gradle
      run: ./gradlew clean build -x test 
      shell: bash

    #9.utcOffset: "+09:00": 해당 action의 기준이 UTC이므로 한국시간인 KST로 진행 하기 위해 offset에 +09:00 를 해준다.
    - name: Get current time
      uses: 1466587594/get-current-time@v2  
      id: current-time
      with:
        format: YYYY-MM-DDTHH-mm-ss 
        utcOffset: "+09:00"

    #10. 현재 시간을 출력한다.
    - name: Show Current Time
      run: echo "CurrentTime=${{steps.current-time.outputs.formattedTime}}" 
      shell: bash

    - name: Generate deployment package # (final)
      run: |
        mkdir -p before-deploy
        cp scripts/*.sh before-deploy/
        cp appspec.yml before-deploy/
        cp build/libs/*.jar before-deploy/
        cd before-deploy && zip -r before-deploy *
        cd ../ && mkdir -p deploy
        mv before-deploy/before-deploy.zip deploy/$PROJECT_NAME.zip
      shell: bash

    #12. 프로젝트 이름으로 해당 폴더를 모두 압축시킨다.
    - name: Make zip file
      run: zip -r ./$PROJECT_NAME.zip .
      shell: bash

    #13. aws에 해당 키 값으로 접속을 진행한다.
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1      
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    #14. s3 에 프로젝트 이름에 해당하는 폴더에 zip파일을 저장한다.
    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./deploy/$PROJECT_NAME.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/$PROJECT_NAME.zip  #(14)

    #16. 배포 그룹으로 해당 애플리케이션을 보낸다.
    - name: Code Deploy
      run: aws deploy create-deployment --application-name $CODE_DEPLOY_APP_NAME --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name $CODE_DEPLOY_GROUP_NAME --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$PROJECT_NAME.zip
